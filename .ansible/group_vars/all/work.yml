---

# DO NOT ALTER THIS FILE - IT IS AUTOGENERATED.

# The following specifies the order in which tools are being installed.
tools_enabled:
  - angular-cli
  - asgardcms
  - eslint
  - git
  - jsonlint
  - mdl
  - awesome-ci
  - codeception
  - deployer
  - git-flow
  - grunt-cli
  - gulp
  - jq
  - laravel-installer
  - laravel-lumen
  - linkcheck
  - mdlint
  - mupdf-tools
  - net-tools
  - phalcon-devtools
  - php-cs-fixer
  - phpcbf
  - phpcs
  - phpmd
  - phpunit
  - pm2
  - pwncat
  - ssh
  - rsync
  - sass
  - shellcheck
  - stylelint
  - svn
  - symfony-cli
  - taskfile
  - tig
  - vim
  - vue-cli
  - webpack-cli
  - wkhtmltopdf
  - wp-cli
  - wscat
  - yamllint
  - yq
  - zsh


# The following specifies how tools are being installed.
tools_available:
  angular-cli:
    disabled: []
    check: ng version 2>&1 | grep -iE 'Angular CLI:\s*[0-9][.0-9]+' || (ng version; false)
    all:
      type: npm
      package: "@angular/cli"
      binary: ng
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  asgardcms:
    disabled: [5.2, 5.3, 5.4]
    check: asgardcms --version 2>/dev/null | grep -Ei 'AsgardCMS\sInstaller\s[0-9][.0-9]+' || (asgardcms --version; false)
    all:
      type: composer
      composer: 2
      package: asgardcms/asgardcms-installer
      # https://github.com/AsgardCms/asgardcms-installer/issues/1
      version: dev-master
      flags:
      binary: asgardcms
      build_dep: []
      run_dep: []
      pre:
      post:
  eslint:
    disabled: []
    check: eslint -v | grep -E '[0-9][.0-9]+' || (eslint -v; false)
    all:
      type: npm
      package: "eslint"
      binary: eslint
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  git:
    disabled: []
    check: git --version 2>&1 | grep -E '[0-9][.0-9]+' || (git --version; false)
    all:
      type: apt
      package: git
  jsonlint:
    disabled: []
    check: jsonlint --version | grep -E '[0-9][.0-9]+' || (jsonlint --version; false)
    all:
      type: npm
      package: jsonlint
      binary: jsonlint
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  mdl:
    disabled: []
    check: mdl --version | grep -E '[.0-9]+' || (mdl --version; false)
    all:
      type: rubygem
      package: mdl
      # version:
      build_dep: [ruby-dev]
      run_dep: [ruby]
      # pre:
      # post:
    7.2:
      type: rubygem
      version: 0.11.0
      pre: |
        gem install chef-utils -v 16.6.14 \
    7.1:
      type: rubygem
      version: 0.11.0
      pre: |
        gem install chef-utils -v 16.6.14 \
    7.0:
      type: rubygem
      version: 0.5.0
      pre: |
        gem install mixlib-config -v 2.2.4 \
    5.6:
      type: rubygem
      version: 0.5.0
      pre: |
        gem install mixlib-config -v 2.2.4 \
    5.5:
      type: rubygem
      version: 0.5.0
      pre: |
        gem install mixlib-config -v 2.2.4 \
    5.4:
      type: rubygem
      version: 0.5.0
      pre: |
        gem install mixlib-config -v 2.2.4 \
    5.3:
      type: rubygem
      version: 0.5.0
      pre: |
        gem install mixlib-config -v 2.2.4 \
    5.2:
      type: rubygem
      version: 0.5.0
      pre: |
        gem install mixlib-config -v 2.2.4 \
  awesome-ci:
    disabled: []
    check: regex-grep --version | grep -E '[0-9][.0-9]+' || (regex-grep --version; false)
    all:
      type: custom
      command: |
        git clone https://github.com/cytopia/awesome-ci.git /tmp/awesome-ci \
        && cd /tmp/awesome-ci \
        && git checkout $(git describe --abbrev=0 --tags) \
        && ./configure --prefix=/usr/local \
        && make install \
        && cd / \
        && rm -rf /tmp/awesome-ci \
      # moreutils: isutf8
      run_dep: [dos2unix, file, moreutils]
  codeception:
    disabled: [5.2, 5.3]
    check: codecept --version 2>/dev/null | grep -E '^Codeception(\sversion)?\s[0-9][.0-9]+$' || (codecept --version; false)
    all:
      type: composer
      composer: 2
      package: codeception/codeception
      # version:
      flags:
      binary: codecept
      build_dep: []
      run_dep: []
      # pre:
      # post:
  deployer:
    disabled: [5.2, 5.3]
    check: dep --version 2>/dev/null | grep -Ei 'deployer\s*(version\s*)?[0-9][.0-9]+' || (dep --version; false)
    all:
      type: custom
      command: curl -sS -k -L --fail https://deployer.org/deployer.phar -L -o /usr/local/bin/dep
      post: chmod +x /usr/local/bin/dep
    7.1:
      type: custom
      command: curl -sS -k -L --fail https://deployer.org/releases/v6.7.0/deployer.phar -L -o /usr/local/bin/dep
    7.0:
      type: custom
      command: curl -sS -k -L --fail https://deployer.org/releases/v6.7.0/deployer.phar -L -o /usr/local/bin/dep
    5.6:
      type: custom
      command: curl -sS -k -L --fail https://deployer.org/releases/v4.3.4/deployer.phar -L -o /usr/local/bin/dep
    5.5:
      type: custom
      command: curl -sS -k -L --fail https://deployer.org/releases/v4.3.4/deployer.phar -L -o /usr/local/bin/dep
    5.4:
      type: custom
      command: curl -sS -k -L --fail https://deployer.org/releases/v3.3.0/deployer.phar -L -o /usr/local/bin/dep
  git-flow:
    disabled: []
    check: git-flow version 2>&1 | grep -E '[0-9][.0-9]+' || (git-flow version; false)
    all:
      type: custom
      command: |
        git clone https://github.com/petervanderdoes/gitflow-avh /tmp/gitflow \
        && cd /tmp/gitflow \
        && make install \
        && cd / && rm -rf /tmp/gitflow \
  grunt-cli:
    disabled: []
    check: grunt --version | grep -E '[0-9][.0-9]+' || (grunt --version; false)
    all:
      type: npm
      package: "grunt-cli"
      binary: grunt
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  gulp:
    disabled: []
    check: gulp --version | grep -E '[0-9][.0-9]+' || (gulp --version; false)
    all:
      type: npm
      package: gulp
      binary: gulp
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  jq:
    disabled: []
    check: jq --version 2>&1 | grep -E '[0-9][.0-9]+' || (jq --version; false)
    all:
      type: apt
      package: jq
  laravel-installer:
    disabled: [5.2, 5.3]
    check: laravel --version | grep ^Laravel | grep -E '[0-9]\.[0-9]+' || (laravel --version; false)
    all:
      type: composer
      composer: 2
      package: laravel/installer
      # version:
      flags:
      binary: bin/laravel
      build_dep: []
      run_dep: []
    7.2:
      type: composer
      version: 4.0.0
    7.1:
      type: composer
      binary: laravel
      version: 2.3.0
    7.0:
      type: composer
      binary: laravel
      version: 2.2.0
    5.6:
      type: composer
      binary: laravel
      version: 2.2.0
    5.5:
      type: composer
      binary: laravel
      version: 2.2.0
    5.4:
      type: composer
      binary: laravel
      version: 1.3.7
  laravel-lumen:
    disabled: [5.2, 5.3, 5.4]
    check: lumen --version 2>/dev/null | grep ^Lumen | grep -E '[0-9]\.[0-9]+' || (lumen --version; false)
    all:
      type: composer
      composer: 2
      package: laravel/lumen-installer
      # version:
      flags:
      binary: lumen
      build_dep: []
      run_dep: []
      # pre:
      # post:
  linkcheck:
    disabled: []
    check: linkcheck --version | grep -E 'v[0-9][.0-9]+' || (linkcheck --version; false)
    all:
      type: custom
      command: curl -sS -L --fail -o /usr/local/bin/linkcheck https://raw.githubusercontent.com/cytopia/linkcheck/master/linkcheck
      post: chmod +x /usr/local/bin/linkcheck
      build_dep: []
      run_dep: []
  mdlint:
    disabled: []
    check: mdlint --version | grep -E '[0-9][.0-9]+' || (mdlint --version; false)
    all:
      type: npm
      package: mdlint
      binary: mdlint
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  mupdf-tools:
    disabled: []
    check: |
      PHP_VERSION="$(php -v | grep ^PHP | awk '{print $2}' | grep -Eo '[0-9]\.[0-9]')" \
      && if echo "${PHP_VERSION}" | grep -E '5\.2|5\.3|5\.4|5\.5'; then \
        mutool 2>&1 | grep ^usage; \
      else \
        echo test > test.txt \
        && mutool create -o test.pdf test.txt \
        && file test.pdf | grep 'PDF document' \
        && rm test.txt \
        && rm test.pdf; \
      fi \
    all:
      type: apt
      package: mupdf-tools
  net-tools:
    disabled: []
    check: netstat --version | grep net-tools || (netstat --version; false)
    all:
      type: apt
      package: net-tools
  phalcon-devtools:
    disabled: [5.2, 5.3, 5.4, 8.2]
    check: |
        if find /usr/local/lib/php/extensions/ -name phalcon.so | grep phalcon; then \
          echo "extension=phalcon.so" > /usr/local/etc/php/conf.d/docker-php-ext-phalcon.ini; \
        fi \
        && if find /usr/local/lib/php/extensions/ -name psr.so | grep psr; then \
          echo "extension=psr.so" > /usr/local/etc/php/conf.d/docker-php-ext-psr.ini; \
        fi \
        \
        \
        && phalcon commands | grep -E '[0-9][.0-9]+' || (phalcon commands; false) \
        \
        \
        && if [ -f /usr/local/etc/php/conf.d/docker-php-ext-phalcon.ini ]; then \
          rm /usr/local/etc/php/conf.d/docker-php-ext-phalcon.ini; \
        fi \
        && if [ -f /usr/local/etc/php/conf.d/docker-php-ext-psr.ini ]; then \
          echo "extension=psr.so" > /usr/local/etc/php/conf.d/docker-php-ext-psr.ini; \
        fi \
    all:
      type: composer
      composer: 2
      package: phalcon/devtools
      binary: phalcon
      # Enable phalcon.so (and its requirement psr prior installing)
      pre: |
        if find /usr/local/lib/php/extensions/ -name phalcon.so | grep phalcon; then \
          echo "extension=phalcon.so" > /usr/local/etc/php/conf.d/docker-php-ext-phalcon.ini; \
        fi \
        && if find /usr/local/lib/php/extensions/ -name psr.so | grep psr; then \
          echo "extension=psr.so" > /usr/local/etc/php/conf.d/docker-php-ext-psr.ini; \
        fi \
      # Disable phalcon.so (and its requirement psr after installing)
      post: |
        if [ -f /usr/local/etc/php/conf.d/docker-php-ext-phalcon.ini ]; then \
          rm /usr/local/etc/php/conf.d/docker-php-ext-phalcon.ini; \
        fi \
        && if [ -f /usr/local/etc/php/conf.d/docker-php-ext-psr.ini ]; then \
          echo "extension=psr.so" > /usr/local/etc/php/conf.d/docker-php-ext-psr.ini; \
        fi \
    7.1:
      type: composer
      version: 3.4.11
    7.0:
      type: composer
      version: 3.4.11
    5.6:
      type: composer
      version: 3.4.11
    5.5:
      type: composer
      version: 3.4.11
  php-cs-fixer:
    disabled: [5.2, 8.2]
    check: php-cs-fixer --version 2>&1 | grep -E 'Fixer\s+(version\s*)?[-_.0-9]+\s+' || (php-cs-fixer --version; false)
    all:
      type: custom
      command: curl -sS -k -L --fail -L "${PHP_CS_FIXER_URL}" -o /usr/local/bin/php-cs-fixer
      pre: PHP_CS_FIXER_URL="https://cs.symfony.com/download/php-cs-fixer-v3.phar"
      post: chmod +x /usr/local/bin/php-cs-fixer
    7.3:
      type: custom
      pre: PHP_CS_FIXER_URL="https://cs.symfony.com/download/php-cs-fixer-v2.phar"
    7.2:
      type: custom
      pre: PHP_CS_FIXER_URL="https://cs.symfony.com/download/php-cs-fixer-v2.phar"
    7.1:
      type: custom
      pre: PHP_CS_FIXER_URL="https://cs.symfony.com/download/php-cs-fixer-v2.phar"
    7.0:
      type: custom
      pre: PHP_CS_FIXER_URL="https://cs.symfony.com/download/php-cs-fixer-v2.phar"
    5.6:
      type: custom
      pre: PHP_CS_FIXER_URL="https://cs.symfony.com/download/php-cs-fixer-v2.phar"
    5.5:
      type: custom
      pre: PHP_CS_FIXER_URL="https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.2.19/php-cs-fixer.phar"
    5.4:
      type: custom
      pre: PHP_CS_FIXER_URL="https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.2.19/php-cs-fixer.phar"
    5.3:
      type: custom
      pre: PHP_CS_FIXER_URL="https://github.com/FriendsOfPHP/PHP-CS-Fixer/releases/download/v2.2.19/php-cs-fixer.phar"
  phpcbf:
    disabled: []
    check: phpcbf --version | grep -E 'version [0-9][.0-9]+' || (phpcbf --version; false)
    all:
      type: custom
      command: curl -sS -k -L --fail -L "${PHPCBF_URL}" -o /usr/local/bin/phpcbf
      pre: PHPCBF_URL="https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar"
      post: chmod +x /usr/local/bin/phpcbf
    5.3:
      type: custom
      pre: PHPCBF_URL="https://github.com/squizlabs/PHP_CodeSniffer/releases/download/2.9.0/phpcbf.phar"
    5.2:
      type: custom
      pre: PHPCBF_URL="https://github.com/squizlabs/PHP_CodeSniffer/releases/download/2.9.0/phpcbf.phar"
  phpcs:
    disabled: []
    check: phpcs --version | grep -E 'version [0-9][.0-9]+' || (phpcs --version; false)
    all:
      type: custom
      command: curl -sS -k -L --fail -L "${PHPCS_URL}" -o /usr/local/bin/phpcs
      pre: PHPCS_URL="https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar"
      post: chmod +x /usr/local/bin/phpcs
    5.3:
      type: custom
      pre: PHPCS_URL="https://github.com/squizlabs/PHP_CodeSniffer/releases/download/2.9.0/phpcs.phar"
    5.2:
      type: custom
      pre: PHPCS_URL="https://github.com/squizlabs/PHP_CodeSniffer/releases/download/2.9.0/phpcs.phar"
  phpmd:
    disabled: [5.2]
    check: phpmd --version | grep -E '^PHPMD [0-9][.0-9]+' || (phpmd --version; false)
    all:
      type: custom
      command: curl -sS -k -L --fail https://phpmd.org/static/latest/phpmd.phar -L -o /usr/local/bin/phpmd
      post: chmod +x /usr/local/bin/phpmd
  phpunit:
    disabled: [5.2]
    check: phpunit --version | grep -iE '^PHPUnit\s[0-9][.0-9]+' || (phpunit --version; false)
    all:
      type: custom
      command: |
        if [ -n "${PHP_UNIT_VERSION}" ]; then \
          PHP_UNIT_URL="https://phar.phpunit.de/phpunit-${PHP_UNIT_VERSION}.phar"; \
        else \
          PHP_UNIT_URL="https://phar.phpunit.de/phpunit.phar"; \
        fi \
        && curl -sS -L --fail "${PHP_UNIT_URL}" -L -o /usr/local/bin/phpunit \
      build_dep: []
      run_dep: []
      pre: PHP_UNIT_VERSION=""
      post: chmod +x /usr/local/bin/phpunit
    7.4:
      type: custom
      pre: PHP_UNIT_VERSION="9"
    7.3:
      type: custom
      pre: PHP_UNIT_VERSION="9"
    7.2:
      type: custom
      pre: PHP_UNIT_VERSION="8"
    7.1:
      type: custom
      pre: PHP_UNIT_VERSION="7"
    7.0:
      type: custom
      pre: PHP_UNIT_VERSION="6"
    5.6:
      type: custom
      pre: PHP_UNIT_VERSION="5"
    5.5:
      type: custom
      pre: PHP_UNIT_VERSION="4"
    5.4:
      type: custom
      pre: PHP_UNIT_VERSION="4"
    5.3:
      type: custom
      pre: PHP_UNIT_VERSION="4"
  pm2:
    disabled: []
    check: pm2 --no-daemon --version | tail -1 | grep -E '[0-9][.0-9]+' || (pm2 --no-daemon --version; false)
    all:
      type: npm
      package: pm2
      binary: pm2
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  pwncat:
    disabled: []
    check: pwncat --version 2>&1 | grep -E 'Version [0-9][.0-9]+' || (pwncat --version; false)
    all:
      type: pip
      version:
      build_dep: []
      run_dep: []
      pre:
      post: |
        ln -s pwncat /usr/local/bin/netcat \
  ssh:
    disabled: []
    check: ssh -V 2>&1 | grep ^OpenSSH || (ssh -V; false)
    all:
      type: apt
      package: openssh-client
  rsync:
    disabled: []
    check: rsync --version | grep version | grep -E '[0-9]\.[0-9]+' || (rsync --version; false)
    all:
      type: apt
      package: rsync
  sass:
    disabled: []
    check: sass --version | grep -E '[0-9][.0-9]+' || (sass --version; false)
    all:
      type: npm
      package: sass
      binary: sass
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  shellcheck:
    disabled: []
    check: shellcheck --version | grep -E '[0-9][.0-9]+' || (shellcheck --version; false)
    all:
      type: apt
      package: shellcheck
  stylelint:
    disabled: []
    check: stylelint --version | grep -E '[0-9][.0-9]+' || (stylelint --version; false)
    all:
      type: npm
      package: stylelint
      binary: stylelint
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  svn:
    disabled: []
    check: svn --version | grep version | grep -E '[0-9]+\.[0-9]+' || (svn --version; false)
    all:
      type: apt
      package: subversion
  symfony-cli:
    disabled: []
    check: symfony --no-ansi -V | grep -E 'version [0-9][.0-9]+' || (symfony --no-ansi -V; false)
    all:
      type: custom
      command: curl -sS https://get.symfony.com/cli/installer | bash -s -- --install-dir /usr/local/bin
      build_dep: []
      run_dep: []
  taskfile:
    disabled: []
    check: task --version | grep -E '[0-9][.0-9]+' || (task --version; false)
    all:
      type: custom
      command: sh -c "$(curl -sS -K --fail -k https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin/
  tig:
    disabled: []
    check: tig --version 2>&1 | grep -E '[0-9][.0-9]+' || (tig --version; false)
    all:
      type: apt
      package: tig
  vim:
    disabled: []
    check: vim --version | grep ^VIM | grep -E '[0-9]\.[0-9]+' || (vim --version; false)
    all:
      type: apt
      package: vim
  vue-cli:
    disabled: []
    check: vue --version | grep -E '[0-9][.0-9]+' || (vue --version; false)
    all:
      type: npm
      package: "@vue/cli"
      binary: vue
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  webpack-cli:
    disabled: []
    check: webpack-cli --version | grep -E '[0-9][.0-9]+' || (webpack-cli --version; false)
    all:
      type: npm
      package: webpack-cli
      binary: webpack-cli
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  wkhtmltopdf:
    disabled: [5.2, 5.3, 5.4, 5.5]
    check: wkhtmltopdf --version | grep ^wkhtmltopdf | grep -E '[0-9]\.[0-9]+' | grep patched || (wkhtmltopdf --version; false)
    all:
      type: custom
      pre: OS_RELEASE="bullseye"
      command: |
        DEB_HOST_ARCH="$( dpkg-architecture --query DEB_HOST_ARCH )" \
        && WK_URL="$( \
          curl -sS -k -L --fail 'https://wkhtmltopdf.org/downloads.html' \
          | awk -F'"' "/wkhtmltopdf.*${OS_RELEASE}_${DEB_HOST_ARCH}\.deb/{print \$(NF-1)}" \
          | head -1 \
        )" \
        && echo "URL: ${WK_URL}" \
        && curl -sS -k -L --fail -o /tmp/wkhtmltopdf.deb "${WK_URL}" \
        && dpkg -i /tmp/wkhtmltopdf.deb \
        && rm -f /tmp/wkhtmltopdf.deb \
      run_dep:
        - fontconfig
        - libfontenc1
        - libxfont2
        - libxrender1
        - xfonts-75dpi
        - xfonts-base
        - xfonts-encodings
        - xfonts-utils
    7.2:
      type: custom
      pre: OS_RELEASE="buster"
    7.1:
      type: custom
      pre: OS_RELEASE="buster"
    7.0:
      type: custom
      pre: OS_RELEASE="stretch"
      run_dep:
        - fontconfig
        - libfontenc1
        - libxfont1
        - libxrender1
        - xfonts-75dpi
        - xfonts-base
        - xfonts-encodings
        - xfonts-utils
    5.6:
      type: custom
      pre: OS_RELEASE="stretch"
      run_dep:
        - fontconfig
        - libfontenc1
        - libxfont1
        - libxrender1
        - xfonts-75dpi
        - xfonts-base
        - xfonts-encodings
        - xfonts-utils
  wp-cli:
    disabled: [5.2]
    check: wp --allow-root --version | grep -E '[0-9][.0-9]+' || (wp --allow-root --version; false)
    all:
      type: custom
      command: curl -sS -L --fail "${WPCLI_URL}" -L -o /usr/local/bin/wp
      build_dep: []
      # Fixes: sh: 1: less: not found during 'wp help'
      # It internally pipes it to less.
      run_dep: [less]
      pre: WPCLI_URL="https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar"
      post: chmod +x /usr/local/bin/wp
    5.5:
      type: custom
      pre: WPCLI_URL="https://github.com/wp-cli/wp-cli/releases/download/v2.4.0/wp-cli-2.4.0.phar"
    5.4:
      type: custom
      pre: WPCLI_URL="https://github.com/wp-cli/wp-cli/releases/download/v2.4.0/wp-cli-2.4.0.phar"
    5.3:
      type: custom
      pre: WPCLI_URL="https://github.com/wp-cli/wp-cli/releases/download/v1.5.1/wp-cli-1.5.1.phar"
  wscat:
    disabled: []
    check: wscat --version | grep -E '[0-9][.0-9]+' || (wscat --version; false)
    all:
      type: npm
      package: wscat
      binary: wscat
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  yamllint:
    disabled: []
    check: yamllint --version 2>&1 | grep -E '[0-9][.0-9]+' || (yamllint --version; false)
    all:
      type: pip
      version:
      build_dep: []
      run_dep: []
      # pre:
      # post:
  yq:
    disabled: []
    check: yq --version 2>&1 | grep -E '[0-9][.0-9]+' || (yq --version; false)
    all:
      type: pip
      version:
      build_dep: []
      run_dep: []
      pre:
      post:
  zsh:
    disabled: []
    check: zsh --version 2>&1 | grep -E '[0-9][.0-9]+' || (zsh --version; false)
    all:
      type: apt
      package: zsh
